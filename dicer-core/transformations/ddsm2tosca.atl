-- @nsURI TOSCA=http://tosca4cloudify/1.0
-- @nsURI DDSM=http://ddsm/1.0
-- @atlcompiler emftvm

module ddsm2tosca;
create tosca : TOSCA from ddsm : DDSM;

rule DDSM2TOSCA{	
	from 
		s: DDSM!DDSM
	using{
		zookeeperCluster: Sequence(TOSCA!NodeTemplate) = s.cloudelement 
			-> select(element | element.oclIsTypeOf(DDSM!ZookeeperCluster))
			-> collect(element | thisModule.getZookeeperCluster(element)).flatten();
		kafkaClusters: Sequence(TOSCA!NodeTemplate) = s.cloudelement 
			-> select(element | element.oclIsTypeOf(DDSM!KafkaCluster))
			-> collect(element | thisModule.getKafkaCluster(element)).flatten();
		stormClusters: Sequence(TOSCA!NodeTemplate) = s.cloudelement 
			-> select(element | element.oclIsTypeOf(DDSM!StormCluster))
			-> collect(element | thisModule.getStormCluster(element)).flatten();
		sparkClusters: Sequence(TOSCA!NodeTemplate) = s.cloudelement 
			-> select(element | element.oclIsTypeOf(DDSM!SparkCluster))
			-> collect(element | thisModule.getSparkCluster(element)).flatten();
		cassandraClusters: Sequence(TOSCA!NodeTemplate) = s.cloudelement 
			-> select(element | element.oclIsTypeOf(DDSM!CassandraCluster))
			-> collect(element | thisModule.getCassandraCluster(element)).flatten();
		hdfsClusters: Sequence(TOSCA!NodeTemplate) = s.cloudelement 
			-> select(element | element.oclIsTypeOf(DDSM!HDFSCluster))
			-> collect(element | thisModule.getHdfsCluster(element)).flatten();
		yarnClusters: Sequence(TOSCA!NodeTemplate) = s.cloudelement 
			-> select(element | element.oclIsTypeOf(DDSM!YarnCluster))
			-> collect(element | thisModule.getYarnCluster(element)).flatten();
		storm_clients: Sequence(TOSCA!NodeTemplate) = s.cloudelement 
			-> select(element | element.oclIsTypeOf(DDSM!ClientNode))
			-> collect(element | thisModule.getClientNodeTemplates(element)).flatten();

	}
	to 
		t: TOSCA!TopologyTemplate(
			tosca_definitions_version <- 'cloudify_dsl_1_2',
			
			description <- s.description,
					
			nodeTemplates <- s.cloudelement 
			-> select(element | element.oclIsKindOf(DDSM!VM))
			-> collect(element | thisModule.getNodeTemplatesFromVM(element)).
			union(s.cloudelement 
			-> select(element | element.oclIsTypeOf(DDSM!InternalComponent))
			-> collect(element | thisModule.getNodeTemplatesFromInternalComponent(element))).
			union(stormClusters).
			union(sparkClusters).
			union(zookeeperCluster).
			union(cassandraClusters).
			union(kafkaClusters).
			union(hdfsClusters).
			union(yarnClusters).
			union(storm_clients),
			
			imports <- DDSM!Provider.allInstances() -> collect(p | thisModule.getProviderImport(p))
		)
}

lazy rule getProviderImport {
	from
		p: DDSM!Provider
	to
		i: TOSCA!Import (
			file <-	'http://dice-project.github.io/DICE-Deployment-Cloudify/spec/' + p.type.toString().replaceAll('#','').toLower() + '/develop/plugin.yaml'
		)
}

-------------------- Client rules --------------------
rule getClientNodeTemplates (s: DDSM!ClientNode) {
    using {
		application: Sequence(TOSCA!Property) = thisModule.getPropertyFromStringAttribute('application', s.submits.artifactUrl);
		name: Sequence(TOSCA!Property) = thisModule.getPropertyFromStringAttribute('name', s.submits.elementId);
		main_class: Sequence(TOSCA!Property) = thisModule.getPropertyFromStringAttribute('class', s.submits.mainClass);
    	arguments: Sequence(TOSCA!Property) = thisModule.getPropertyFromStringAttribute('arguments', s.submits.applicationArguments);
    	storm_client_properties: Sequence(TOSCA!Property) = Sequence{application, name, main_class, arguments}.flatten();
    	
    	executing_platform: DDSM!MasterSlavePlatform = s.requiredexecutionplatform ->
									collect(platform |  
										DDSM!ExecutionBinding.allInstances() ->  
										select(binding | 
											binding.requiredexecutionplatform.elementId = platform.elementId and
											binding.providedexecutionplatform.owner.oclIsKindOf(DDSM!MasterSlavePlatform)
										)
									) -> flatten() -> first().providedexecutionplatform.owner;
	}
	to
		t: TOSCA!NodeTemplate (
			node_template_name <- s.elementId,
			-- the type have to be parametric to the master node to which the client is linked
			type <- 'dice.components.' + executing_platform.getPlatformType + 'Application',
			 
			properties <- s.property 
			-> collect(property | thisModule.getProperty(property)).
				union(storm_client_properties),
				
			relationships <- thisModule.getClientRelationshipsWithMasterSlavePlatform(executing_platform)
		)
	do {
		Sequence{t};
	}
}

rule getClientRelationshipsWithMasterSlavePlatform(s: DDSM!MasterSlavePlatform) {
	using {
		supervisor_bindings: Sequence(DDSM!ExecutionBinding) = s.requiresSlaveVm ->  
			collect(platform | 
				DDSM!ExecutionBinding.allInstances() -> 
				select(binding | 
					binding.requiredexecutionplatform.elementId = platform.elementId and
					binding.providedexecutionplatform.owner.oclIsTypeOf(DDSM!VM)
				)
			) -> flatten();
	
		client_to_workers: Sequence(TOSCA!Relationship) = supervisor_bindings -> collect(
			binding | thisModule.getClientToStormRelationship(s.elementId + '_' + binding.providedexecutionplatform.owner.elementId + '_worker')
		);
	}
	to
		client_to_master: TOSCA!Relationship(
			target <- s.elementId,
			-- the type have to be parametric to the master node to which the client is linked
			type <- 'dice.relationships.' + s.getPlatformType + 'SubmittedBy'
		)
	do {
		Sequence{client_to_master, client_to_workers} -> flatten();
	}
}

lazy rule getClientToStormRelationship {
	from 
		s: String
	to 
		t: TOSCA!Relationship (
			target <- s,
			type <- 'dice.relationships.Needs'	
		)
}

helper context DDSM!MasterSlavePlatform def: getPlatformType: String =
	if not self.oclIsTypeOf(DDSM!StormCluster) then
		if not self.oclIsTypeOf(DDSM!SparkCluster) then
			''
		else
			'spark.'
		endif
	else
		'storm.'
	endif;

-------------------- Client rules --------------------

-------------------- Zookeeper rules --------------------

rule getZookeeperCluster ( zookeeperCluster: DDSM!ZookeeperCluster) {
	using {
		peers_exec_bindings: Sequence(DDSM!ExecutionBinding) = zookeeperCluster.requiresPeerVm -> collect(peer_required_platform |  DDSM!ExecutionBinding.allInstances() -> 
			select(binding | binding.requiredexecutionplatform.elementId = peer_required_platform.elementId 
				and binding.providedexecutionplatform.owner.oclIsTypeOf(DDSM!VM))) -> flatten();
	
		peers: Sequence(TOSCA!NodeTemplate) = peers_exec_bindings -> collect(binding | 
			thisModule.getPeerNodeTemplateForZookeeperCluster(binding.providedexecutionplatform.owner, zookeeperCluster)) -> flatten();
	}
	to
		quorum: TOSCA!NodeTemplate (
			node_template_name <- zookeeperCluster.elementId,	
			type <- 'dice.components.zookeeper.Quorum', 
			
			properties <- zookeeperCluster.property 
			-> collect(property | thisModule.getProperty(property)),
			
			relationships <- zookeeperCluster.requiresPeerVm -> collect(platform | DDSM!ExecutionBinding.allInstances() ->
			select(binding | binding.requiredexecutionplatform.elementId = platform.elementId)
			) -> flatten() -> collect(binding | thisModule.getZookeeperQuorumContainsRelationshipForZookeeperCluster(binding.providedexecutionplatform.owner.elementId)) -> flatten()
			.union(
				zookeeperCluster.requiredport -> collect( port | 
				thisModule.getConnectedToRelationshipFromRelationship(DDSM!Relationship.allInstances() ->  any(relationship | 
				relationship.requiredport.elementId = port.elementId
			))))
		)
	do {
		Sequence{peers, quorum};
	}
}

rule getZookeeperQuorumContainsRelationshipForZookeeperCluster(targ: String) {
	to
		t: TOSCA!Relationship (
			target <- targ,

			type <- 'dice.relationships.zookeeper.QuorumContains'
		)
	do {
		Sequence{t};
	}
}

rule getPeerNodeTemplateForZookeeperCluster (host: DDSM!VM, zookeeperCluster: DDSM!ZookeeperCluster) {
	to
		zookeeper_peer: TOSCA!NodeTemplate(
			node_template_name <- zookeeperCluster.elementId + '_' + host.elementId + '_slave',	
			type <- 'dice.components.zookeeper.Server', 
			
			properties <- zookeeperCluster.property 
			-> collect(property | thisModule.getProperty(property)),
			
			relationships <- thisModule.getZookeeperServerRelationshipForZookeeperCluster(host, zookeeperCluster).
			union(
				zookeeperCluster.requiredport -> collect( port | 
				thisModule.getConnectedToRelationshipFromRelationship(DDSM!Relationship.allInstances() ->  any(relationship | 
				relationship.requiredport.elementId = port.elementId
			)))),
			
			configurations <- thisModule.getConfigurationFromAttribute('tickTime', 1500).union(
			thisModule.getConfigurationFromAttribute('initLimit', 10)).union(
			thisModule.getConfigurationFromAttribute('syncLimit', 5))
		),
		
		zookeeper_peer_firewall: TOSCA!NodeTemplate(
			node_template_name <- zookeeperCluster.elementId + '_' + host.elementId + '_slave_firewall',	
			type <- 'dice.firewall_rules.zookeeper.Server'
		)
	do {
		Sequence{zookeeper_peer, zookeeper_peer_firewall};
	}
}

rule getZookeeperServerRelationshipForZookeeperCluster(host: DDSM!VM, zookeeperCluster: DDSM!ZookeeperCluster) {
	to
		zookeeper_to_host: TOSCA!Relationship(
			target <- host.elementId,
			type <- 'dice.relationships.ContainedIn'
		),
		zookeeper_to_quorum: TOSCA!Relationship(
			target <- zookeeperCluster.elementId,
			type <- 'dice.relationships.zookeeper.MemberOfQuorum'
		)
	do {
		Sequence{zookeeper_to_host, zookeeper_to_quorum};
	}
}

-------------------- Zookeeper rules --------------------

-------------------- Cassandra rules --------------------

rule getCassandraCluster (cassandraCluster: DDSM!CassandraCluster){
	using {
		workers: Sequence(TOSCA!NodeTemplate) = 
			cassandraCluster.requiresPeerVm -> collect(worker_required_platform |  
				DDSM!ExecutionBinding.allInstances() -> select(binding | 
					binding.requiredexecutionplatform.elementId = worker_required_platform.elementId
					and binding.providedexecutionplatform.owner.oclIsTypeOf(DDSM!VM))) -> flatten() -> collect(binding 
						| thisModule.getWorkerNodeTemplateForCassandraCluster(binding.providedexecutionplatform.owner, cassandraCluster));
	}
	to
		seed: TOSCA!NodeTemplate (
			node_template_name <- cassandraCluster.elementId + '_seed',	
			type <- 'dice.components.cassandra.Seed', 
			
			relationships <- thisModule.getContainedInRelationshipForCassandraClusterSeed(cassandraCluster)
		)
	do {
		Sequence{seed, workers};
	}
}

rule getContainedInRelationshipForCassandraClusterSeed(cassandraCluster: DDSM!CassandraCluster) {
	to
		t: TOSCA!Relationship (
			target <- DDSM!ExecutionBinding.allInstances() -> any(binding |
				binding.requiredexecutionplatform.elementId = cassandraCluster.requiresPeerVm.first().elementId and
				binding.providedexecutionplatform.owner.oclIsTypeOf(DDSM!VM)).providedexecutionplatform.owner.elementId,
			
			type <- 'dice.relationships.ContainedIn'
		)
	do {
		Sequence{t};
	}
}

rule getWorkerNodeTemplateForCassandraCluster (host: DDSM!VM, cassandraCluster: DDSM!CassandraCluster) {
	to
		cassandra_worker: TOSCA!NodeTemplate(
			node_template_name <- cassandraCluster.elementId + '_' + host.elementId + '_worker',	
			type <- 'dice.components.cassandra.Worker', 
			
			relationships <- thisModule.getCassandraWorkerRelationshipForCassandraCluster(host, cassandraCluster)
		),
		
		worker_firewall: TOSCA!NodeTemplate(
			node_template_name <- cassandraCluster.elementId + '_' + host.elementId + '_worker' + '_firewall',
			type <- 'dice.firewall_rules.cassandra.Common'
		)	
	do {
		Sequence{cassandra_worker, worker_firewall};
	}
}

rule getCassandraWorkerRelationshipForCassandraCluster(host: DDSM!VM, cassandraCluster: DDSM!CassandraCluster) {
	to
		worker_to_host: TOSCA!Relationship(
			target <- host.elementId,
			type <- 'dice.relationships.ContainedIn'
		),
		worker_to_seed: TOSCA!Relationship(
			target <- cassandraCluster.elementId + '_seed',
			type <- 'dice.relationships.cassandra.ConnectedToSeed'
		)
	do {
		Sequence{worker_to_host, worker_to_seed};
	}
}

-------------------- Cassandra rules --------------------

-------------------- Spark rules --------------------

lazy rule getSparkCluster {
	from
		sparkCluster: DDSM!SparkCluster
	to 
		master: TOSCA!NodeTemplate (
			node_template_name <- sparkCluster.elementId,	
			type <- 'dice.components.spark.Master', 
			relationships <- Sequence{thisModule.getContainedInRelationshipFromExecutionBinding(DDSM!ExecutionBinding.allInstances() -> 
				any(binding | 
					binding.requiredexecutionplatform.elementId = sparkCluster.requiresMasterVm.elementId
				)
			)},
			
			properties <- sparkCluster.property 
			-> collect(property | thisModule.getProperty(property)),
			
			configurations <- thisModule.getConfigurationFromAttribute('driverMemory', 1).union(
			thisModule.getConfigurationFromAttribute('driverCores', 1)).union(
			thisModule.getConfigurationFromAttribute('maxResultSize', 1)).union(
			thisModule.getConfigurationFromAttribute('UIPort', 4040))
		),
		
		master_firewall: TOSCA!NodeTemplate(
			node_template_name <- sparkCluster.elementId + '_firewall',
			type <- 'dice.firewall_rules.spark.Master'
		)
	do {
		Sequence{master, master_firewall, sparkCluster.requiresSlaveVm -> 
			collect(slave_required_platform |  
				DDSM!ExecutionBinding.allInstances() -> 
				any(binding | 
					binding.requiredexecutionplatform.elementId = slave_required_platform.elementId
				)
			) -> 
			collect(binding | 
				thisModule.getWorkerNodeTemplateForSparkCluster(binding.providedexecutionplatform.owner, sparkCluster)
			)
		}.flatten();
	}
}

lazy rule getWorkerNodeTemplateForSparkCluster {
	from 
		host: DDSM!VM, 
		sparkCluster: DDSM!SparkCluster
	to
		worker: TOSCA!NodeTemplate(
			node_template_name <- sparkCluster.elementId + '_' + host.elementId + '_worker',	
			type <- 'dice.components.spark.Worker', 
			
			relationships <- thisModule.getSparkWorkerRelationshipForSparkCluster(host, sparkCluster),
			
			properties <- sparkCluster.property 
			-> collect(property | thisModule.getProperty(property)),
			
			configurations <- thisModule.getConfigurationFromAttribute('sparkExecutorMemory', 1)
		),
		
		spark_worker_firewall: TOSCA!NodeTemplate(
			node_template_name <- sparkCluster.elementId  + '_' + host.elementId + '_worker' + '_firewall',
			type <- 'dice.firewall_rules.spark.Worker'
		)		
	do {
		Sequence{worker	, spark_worker_firewall};
	}
}

lazy rule getSparkWorkerRelationshipForSparkCluster {
	from
		host: DDSM!VM,
		sparkCluster: DDSM!SparkCluster
	to
		worker_to_host: TOSCA!Relationship(
			target <- host.elementId,
			type <- 'dice.relationships.ContainedIn'
		),
		worker_to_master: TOSCA!Relationship(
			target <- sparkCluster.elementId,
			type <- 'dice.relationships.spark.ConnectedToMaster'
		)
	do {
		Sequence{worker_to_host, worker_to_master};
	}
}

-------------------- Spark rules --------------------

-------------------- Storm rules --------------------

rule getStormCluster (stormCluster: DDSM!StormCluster) {
	using {
		slaves_exec_bindings: Sequence(DDSM!ExecutionBinding) = stormCluster.requiresSlaveVm -> collect(slave_required_platform |  DDSM!ExecutionBinding.allInstances() -> 
			any(binding | binding.requiredexecutionplatform.elementId = slave_required_platform.elementId));
		slaves: Sequence(TOSCA!NodeTemplate) = slaves_exec_bindings -> collect(binding | thisModule.getSupervisorNodeTemplateForStormCluster(binding.providedexecutionplatform.owner, stormCluster));
	}
	to 
		nimbus: TOSCA!NodeTemplate (
			node_template_name <- stormCluster.elementId,	
			type <- 'dice.components.storm.Nimbus', 
			relationships <- thisModule.getNimbusRelationshipForStormCluster(stormCluster).
			union(
				stormCluster.requiredport -> collect( port | 
					thisModule.getConnectedToZookeeperQuorumRelationship(DDSM!Relationship.allInstances() ->  
						any(relationship | 
							relationship.requiredport.elementId = port.elementId and 
							relationship.providedport.owner.oclIsTypeOf(DDSM!ZookeeperCluster)
						)
					) 
				)
			),
			
			properties <- stormCluster.property 
			-> collect(property | thisModule.getProperty(property)),
			
			configurations <- thisModule.getConfigurationFromAttribute('taskTimeout', 30).union(
			thisModule.getConfigurationFromAttribute('supervisorTimeout', 60)).union(
			thisModule.getConfigurationFromAttribute('monitorFrequency', 10)).union(
			thisModule.getConfigurationFromAttribute('queueSize', 100000)).union(
			thisModule.getConfigurationFromAttribute('retryTimes', 5)).union(
			thisModule.getConfigurationFromAttribute('retryInterval', 2000)).union(
			thisModule.getConfigurationFromAttribute('workerStartTimeout', 120)).union(
			thisModule.getConfigurationFromAttribute('heartbeatFrequency', 5)).union(
			thisModule.getConfigurationFromAttribute('cpuCapacity', 400)).union(
			thisModule.getConfigurationFromAttribute('memoryCapacity', 4096))
		),
		
		nimbus_firewall: TOSCA!NodeTemplate(
			node_template_name <- stormCluster.elementId + '_firewall',
			type <- 'dice.firewall_rules.storm.Nimbus'
		)		
	do {
		Sequence{nimbus, nimbus_firewall, slaves};
	}
}

rule getSupervisorNodeTemplateForStormCluster(host: DDSM!VM, stormCluster: DDSM!StormCluster) {
	to
		supervisor: TOSCA!NodeTemplate(
			node_template_name <- stormCluster.elementId + '_' + host.elementId + '_worker',	
			type <- 'dice.components.storm.Worker', 
			
			relationships <- thisModule.getSupervisorRelationshipForStormCluster(host, stormCluster).
			union(
				stormCluster.requiredport -> collect( port | 
					thisModule.getConnectedToZookeeperQuorumRelationship(DDSM!Relationship.allInstances() ->  
						any(relationship | 
							relationship.requiredport.elementId = port.elementId and 
							relationship.providedport.owner.oclIsTypeOf(DDSM!ZookeeperCluster)
						)
					)
				) 
			),
			
			properties <- stormCluster.property 
			-> collect(property | thisModule.getProperty(property)),
			
			configurations <- thisModule.getConfigurationFromAttribute('workerStartTimeout', 120).union(
			thisModule.getConfigurationFromAttribute('heartbeatFrequency', 5)).union(
			thisModule.getConfigurationFromAttribute('cpuCapacity', 400)).union(
			thisModule.getConfigurationFromAttribute('memoryCapacity', 4096))	
		)
	do {
		supervisor;
	}
}

lazy rule getConnectedToZookeeperQuorumRelationship {
	from
		s:  DDSM!Relationship
	to
		t: TOSCA!Relationship(
			target <- s.providedport.owner.elementId,
			type <- 'dice.relationships.storm.ConnectedToZookeeperQuorum'
		)
}

rule getSupervisorRelationshipForStormCluster(host: DDSM!VM, stormCluster: DDSM!StormCluster) {
	to
		supervisor_to_host: TOSCA!Relationship(
			target <- host.elementId,
			type <- 'dice.relationships.ContainedIn'
		),
		supervisor_to_nimbus: TOSCA!Relationship(
			target <- stormCluster.elementId,
			type <- 'dice.relationships.storm.ConnectedToNimbus'
		)
	do {
		Sequence{supervisor_to_host, supervisor_to_nimbus};
	}
}

rule getNimbusRelationshipForStormCluster(stormCluster: DDSM!StormCluster) {
	to
		nimbus_to_host: TOSCA!Relationship(
		    target <- (DDSM!ExecutionBinding.allInstances() -> 
				any(binding | binding.requiredexecutionplatform.elementId = stormCluster.requiresMasterVm.elementId)).providedexecutionplatform.owner.elementId,
			
			type <- 'dice.relationships.ContainedIn'
		)
	do {
		Sequence{nimbus_to_host};
	}
}

-------------------- Storm rules --------------------

-------------------- YARN rules --------------------
rule getYarnCluster (yarnCluster: DDSM!YarnCluster) {
	using {
		slaves_exec_bindings: Sequence(DDSM!ExecutionBinding) = yarnCluster.requiresSlaveVm -> collect(slave_required_platform |  DDSM!ExecutionBinding.allInstances() -> 
			any(binding | binding.requiredexecutionplatform.elementId = slave_required_platform.elementId));
		slaves: Sequence(TOSCA!NodeTemplate) = slaves_exec_bindings -> collect(binding | thisModule.getNodeManagerNodeTemplateForYarnCluster(binding.providedexecutionplatform.owner, yarnCluster));
	}
	to 
		resourceManager: TOSCA!NodeTemplate (
			node_template_name <- yarnCluster.elementId,	
			type <- 'dice.components.hadoop.ResourceManager', 
			relationships <- thisModule.getResourceManagerRelationshipForYarnCluster(yarnCluster),
			
			properties <- yarnCluster.property 
			-> collect(property | thisModule.getProperty(property))
		),
		
		resourceManager_firewall: TOSCA!NodeTemplate(
			node_template_name <- yarnCluster.elementId + '_firewall',
			type <- 'dice.firewall_rules.hadoop.ResourceManager'
		)		
	do {
		Sequence{resourceManager, resourceManager_firewall, slaves};
	}
}

rule getNodeManagerNodeTemplateForYarnCluster(host: DDSM!VM, yarnCluster: DDSM!YarnCluster) {
	to
		nodeManager: TOSCA!NodeTemplate(
			node_template_name <- yarnCluster.elementId + '_' + host.elementId + '_worker',	
			type <- 'dice.components.hadoop.NodeManager', 
			
			relationships <- thisModule.getNodeManagerRelationshipForYarnCluster(host, yarnCluster),
			
			properties <- yarnCluster.property 
			-> collect(property | thisModule.getProperty(property))
		)
	do {
		nodeManager;
	}
}

rule getNodeManagerRelationshipForYarnCluster(host: DDSM!VM, yarnCluster: DDSM!YarnCluster) {
	to
		node_manager_to_host: TOSCA!Relationship(
			target <- host.elementId,
			type <- 'dice.relationships.ContainedIn'
		),
		node_manager_to_resource_manager: TOSCA!Relationship(
			target <- yarnCluster.elementId,
			type <- 'dice.relationships.hadoop.ConnectedToResourceManager'
		)
	do {
		Sequence{node_manager_to_host, node_manager_to_resource_manager};
	}
}

rule getResourceManagerRelationshipForYarnCluster(yarnCluster: DDSM!YarnCluster) {
	to
		resource_manager_to_host: TOSCA!Relationship(
		    target <- (DDSM!ExecutionBinding.allInstances() -> 
				any(binding | binding.requiredexecutionplatform.elementId = yarnCluster.requiresMasterVm.elementId)).providedexecutionplatform.owner.elementId,
			
			type <- 'dice.relationships.ContainedIn'
		)
	do {
		Sequence{resource_manager_to_host};
	}
}
-------------------- YARN rules --------------------

-------------------- Kafka rules --------------------

rule getKafkaCluster ( kafkaCluster: DDSM!KafkaCluster) {
	using {
		brokers: Sequence(TOSCA!NodeTemplate) = 
		kafkaCluster.requiresPeerVm -> collect(broker_required_platform |  
			DDSM!ExecutionBinding.allInstances() -> select(binding | 
				binding.requiredexecutionplatform.elementId = broker_required_platform.elementId
				and binding.providedexecutionplatform.owner.oclIsTypeOf(DDSM!VM))) -> flatten() -> collect(binding 
					| thisModule.getPeerNodeTemplateForKafkasCluster(binding.providedexecutionplatform.owner, kafkaCluster));
	}
	do {
		Sequence{brokers};
	}
}

rule getPeerNodeTemplateForKafkasCluster (host: DDSM!VM, kafkaCluster: DDSM!KafkaCluster) {
	to
		kafka_peer: TOSCA!NodeTemplate(
			node_template_name <- kafkaCluster.elementId + '_' + host.elementId + '_worker',	
			type <- 'dice.components.kafka.Broker', 
			
			properties <- kafkaCluster.property 
			-> collect(property | thisModule.getProperty(property)),
			
			relationships <- thisModule.getKafkaServerRelationshipForKafkaCluster(host, kafkaCluster).
			union(
				kafkaCluster.requiredport -> collect( port | 
					thisModule.getConnectedToZookeeperQuorumRelationship(DDSM!Relationship.allInstances() ->  
						any(relationship | 
							relationship.requiredport.elementId = port.elementId and 
							relationship.providedport.owner.oclIsTypeOf(DDSM!ZookeeperCluster)
						)
					) 
				)
			)
		),
		
		kafka_peer_firewall: TOSCA!NodeTemplate(
			node_template_name <- kafkaCluster.elementId + '_' + host.elementId + '_worker_firewall',	
			type <- 'dice.firewall_rules.kafka.Broker'
		)
	do {
		Sequence{kafka_peer, kafka_peer_firewall};
	}
}

rule getKafkaServerRelationshipForKafkaCluster(host: DDSM!VM, kafkaCluster: DDSM!KafkaCluster) {
	to
		kafka_to_host: TOSCA!Relationship(
			target <- host.elementId,
			type <- 'dice.relationships.ContainedIn'
		)
	do {
		Sequence{kafka_to_host};
	}
}

-------------------- Kafka rules --------------------

-------------------- HDFS rules --------------------

rule getHdfsCluster (hdfsCluster: DDSM!HDFSCluster) {
	using {
		slaves_exec_bindings: Sequence(DDSM!ExecutionBinding) = hdfsCluster.requiresSlaveVm -> collect(slave_required_platform |  DDSM!ExecutionBinding.allInstances() -> 
			any(binding | binding.requiredexecutionplatform.elementId = slave_required_platform.elementId));
		slaves: Sequence(TOSCA!NodeTemplate) = slaves_exec_bindings -> collect(binding | thisModule.getDataNodeNodeTemplateForHdfsCluster(binding.providedexecutionplatform.owner, hdfsCluster));
	}
	to 
		nameNode: TOSCA!NodeTemplate (
			node_template_name <- hdfsCluster.elementId,	
			type <- 'dice.components.hadoop.NameNode', 
			relationships <- thisModule.getNameNodeRelationshipForHdfsCluster(hdfsCluster),
			
			properties <- hdfsCluster.property 
			-> collect(property | thisModule.getProperty(property))
		),
		
		nameNode_firewall: TOSCA!NodeTemplate(
			node_template_name <- hdfsCluster.elementId + '_firewall',
			type <- 'dice.firewall_rules.hadoop.NameNode'
		)		
	do {
		Sequence{nameNode, nameNode_firewall, slaves};
	}
}

rule getDataNodeNodeTemplateForHdfsCluster(host: DDSM!VM, hdfsCluster: DDSM!HDFSCluster) {
	to
		dataNode: TOSCA!NodeTemplate(
			node_template_name <- hdfsCluster.elementId + '_' + host.elementId + '_worker',	
			type <- 'dice.components.hadoop.DataNode', 
			
			relationships <- thisModule.getDataNodeRelationshipForHdfsCluster(host, hdfsCluster),
			
			properties <- hdfsCluster.property 
			-> collect(property | thisModule.getProperty(property))
		)
	do {
		dataNode;
	}
}

rule getDataNodeRelationshipForHdfsCluster(host: DDSM!VM, hdfsCluster: DDSM!HDFSCluster) {
	to
		data_node_to_host: TOSCA!Relationship(
			target <- host.elementId,
			type <- 'dice.relationships.ContainedIn'
		),
		data_node_manager_to_resource_manager: TOSCA!Relationship(
			target <- hdfsCluster.elementId,
			type <- 'dice.relationships.hadoop.ConnectedToNameNode'
		)
	do {
		Sequence{data_node_to_host, data_node_manager_to_resource_manager};
	}
}

rule getNameNodeRelationshipForHdfsCluster(hdfsCluster: DDSM!HDFSCluster) {
	to
		name_node_to_host: TOSCA!Relationship(
		    target <- (DDSM!ExecutionBinding.allInstances() -> 
				any(binding | binding.requiredexecutionplatform.elementId = hdfsCluster.requiresMasterVm.elementId)).providedexecutionplatform.owner.elementId,
			
			type <- 'dice.relationships.ContainedIn'
		)
	do {
		Sequence{name_node_to_host};
	}
}

-------------------- HDFS rules --------------------


lazy rule getProtectedByRelationships {
	from
		s: String
	to
		t: TOSCA!Relationship (
			target <- s,
			type <- 'dice.relationships.ProtectedBy'
		)
		
}

lazy rule getNodeTemplatesFromVM{
	from
		s: DDSM!VM
	to
		t : TOSCA!NodeTemplate(
			node_template_name <- s.elementId,
            type <- s.getVMGenericSize, 
			
			properties <- s.property 
			-> collect(property | thisModule.getProperty(property)),	
			
			instances <- thisModule.getInstancesElement(s.instances),
						
			interfaces <- 
			s.resource 
			-> select(resource | resource.oclIsTypeOf(DDSM!Resource))
			-> collect(resource | thisModule.getInterfaceFromResource(resource)),
			
			relationships <- 
			DDSM!PeerToPeerPlatform.allInstances() -> 
			select( peer2peer | 
				peer2peer.requiresPeerVm ->
				exists(reqPlatform | 
					s.providedexecutionplatform ->
					exists(provPlatform | 
							DDSM!ExecutionBinding.allInstances() ->
							exists(binding | 
								binding.requiredexecutionplatform.elementId = reqPlatform.elementId and
								binding.providedexecutionplatform.elementId = provPlatform.elementId
							)
					)
				)
			) ->
			collect(peer2peer | thisModule.getProtectedByRelationships(peer2peer.elementId + '_' + s.elementId + '_worker_firewall'))
			.union(
				DDSM!MasterSlavePlatform.allInstances() -> 
				select(masterslave | 
					s.providedexecutionplatform ->
					exists(provPlatform | 
							DDSM!ExecutionBinding.allInstances() ->
							exists(binding | 
								binding.requiredexecutionplatform.elementId = masterslave.requiresMasterVm.elementId and
								binding.providedexecutionplatform.elementId = provPlatform.elementId
							)
					)
				) ->
				collect(masterslave | thisModule.getProtectedByRelationships(masterslave.elementId + '_firewall'))
			)			
		)
}

lazy rule getInstancesElement{
	from
		nInstances: Integer
	to
		instances_element: TOSCA!Instances(
			deploy <- nInstances	
		)
	do {
		instances_element;
	}
}

lazy rule getNodeTemplatesFromInternalComponent{
	from 
		s : DDSM!InternalComponent
	to
		t : TOSCA!NodeTemplate(
			node_template_name <- s.elementId,	
			type <- 'dice.chef.SoftwareComponent', 
			
			relationships <- (
			s.requiredexecutionplatform -> collect( platform | 
				DDSM!ExecutionBinding.allInstances() ->  select(binding | 
				binding.requiredexecutionplatform.elementId = platform.elementId) -> collect(binding |
				thisModule.getContainedInRelationshipFromExecutionBinding(binding)
				)
			).
			union(
			s.requiredport -> collect( port | 
				DDSM!Relationship.allInstances() ->  select(relationship | 
				relationship.requiredport.elementId = port.elementId) -> collect(relationship |
				thisModule.getConnectedToRelationshipFromRelationship(relationship)	
				)
			))).flatten(),
			
			properties <- s.property 
			-> collect(property | thisModule.getProperty(property)).union(
				thisModule.getCreateRunListProperty()
			),
			
			interfaces <- 
			s.resource 
			-> collect(resource | thisModule.getLifecycleInterfaceFromResource(resource))	
		)
		
}

rule getCreateRunListProperty() {
	to
		t: TOSCA!Property(
			property_name <- 'create_runlist',
			value <- '[recipe[apt::default], recipe[dice_common::default]]'
		)
	do {
		Sequence{t};
	}
}

rule getLifecycleInterfaceFromResource (s: DDSM!Resource){
	to
		t: TOSCA!Interface (
			interface_name <- s.resourceId,
			type <- 'cloudify.interfaces.lifecycle',
			operations <- Sequence{
				if not s.download.oclIsUndefined() then thisModule.getOperationFromArtifact(s.download, 'download') else thisModule.getEmptyOperation('download') endif,
				if not s.install.oclIsUndefined() then thisModule.getOperationFromArtifact(s.install, 'install') else thisModule.getEmptyOperation('install') endif,
				if not s.configure.oclIsUndefined() then thisModule.getOperationFromArtifact(s.configure, 'configure') else thisModule.getEmptyOperation('configure') endif,
				if not s.start.oclIsUndefined() then thisModule.getOperationFromArtifact(s.start, 'start') else thisModule.getEmptyOperation('start') endif,
				if not s.stop.oclIsUndefined() then thisModule.getOperationFromArtifact(s.stop, 'stop') else thisModule.getEmptyOperation('stop') endif,
				if not s.destroy.oclIsUndefined() then thisModule.getOperationFromArtifact(s.destroy, 'destroy') else thisModule.getEmptyOperation('destroy') endif	
			}
		)
	do {
		t;
	}
}

rule getEmptyOperation (type: String) {
	to
		t: TOSCA!Operation(
			operation_name <- type
		)
	do {
		t;
	}
}

lazy rule getOperationFromArtifact {
	from
		s: DDSM!Artifact,
		type: String
	to
		t: TOSCA!Operation (
			operation_name <- type,
			dependentArtifacts <- s.resources,
			inputs <- Sequence{
				thisModule.getPropertyFromStringAttribute('language', s.language.toString().replaceAll('#', '').toLower()),
				thisModule.getPropertyFromStringAttribute('script', s.artifactPath)
			}.flatten()
		)
}

lazy rule getContainedInRelationshipFromExecutionBinding{
	from
		s:  DDSM!ExecutionBinding
	to
		t: TOSCA!Relationship(
			target <- s.providedexecutionplatform.owner.elementId,
			type <- 'dice.relationships.ContainedIn'
		)
}

lazy rule getConnectedToRelationshipFromRelationship {
	from
		s:  DDSM!Relationship
	to
		t: TOSCA!Relationship(
			target <- s.providedport.owner.elementId,
			type <- 'dice.relationships.Needs'
		)
		
}

helper context DDSM!VM def: getVMGenericSize: String =
	if not self.genericSize.oclIsUndefined() then
		'dice.hosts.' + self.genericSize.toString().replaceAll('#', '')
	else
		'dice.hosts.GenericHost'
	endif;

lazy rule getProperty{
	from 
		s : DDSM!Property
	to
		t : TOSCA!Property(
			property_name <- s.propertyId,
			value <- s.value
		)
}

rule getPropertyFromAttribute(name: String, value: Integer){
	to
		t : TOSCA!Property(
			property_name <- name,
			value <- value.toString()
		)
	do {
		Sequence{t};
	}
}

rule getConfigurationFromAttribute(name: String, value: Integer){
	to
		t : TOSCA!Configuration(
			property_name <- name,
			value <- value.toString()
		)
	do {
		Sequence{t};
	}
}

rule getPropertyFromStringAttribute(name: String, value: String){
	to
		t : TOSCA!Property(
			property_name <- name,
			value <- value.toString()
		)
	do {
		Sequence{t};
	}
}
