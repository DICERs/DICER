// automatically generated by Xtext
grammar it.polimi.dice.dicer.ToscaDsl with org.eclipse.xtext.common.Terminals

import "http://tosca/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TopologyTemplate returns TopologyTemplate:
	'{'
		'"tosca_definitions_version" :' tosca_definitions_version=STRING 
		(',\n"description" :' description=STRING )? 
		(',\n"imports" :' '[' imports+=Import ( "," imports+=Import)* ']' )? 
		(',\n"outputs" :' '{' outputs+=Parameter ( "," outputs+=Parameter)* '}' )? 
		(',\n"inputs" :' '{' inputs+=Parameter ( "," inputs+=Parameter)* '}' )? 
		(',\n"node_templates" :' '{' nodeTemplates+=NodeTemplate ( "," nodeTemplates+=NodeTemplate)* '}' )? 
		(',\n"realtionships" :' '{' realtionships+=Relationship ( "," realtionships+=Relationship)* '}' )? 
		(',\n"groups" :' '{' groups+=Group ( "," groups+=Group)* '}')? 
		(',\n"policies" :' '{' policies+=Policy ( "," policies+=Policy)* '}')? 
	'}';

EString returns ecore::EString:
	STRING | ID;

Import returns Import:
	{Import}	
		(file=STRING)?
;
	//'{'
		//'"file" :' file=EString 
		//(',\n"import_name" :' import_name=STRING )?
		//(',\n"repository" :' repository=STRING )?
		//(',\n"namespace_uri" :' namespace_uri=STRING )?
		//(',\n"namespace_prefix" :' namespace_prefix=STRING )?
	//'}';

Parameter returns Parameter:
	{Parameter}
	parameter_name=STRING ':'
	'{'
		'\n"value": ' parameter_value= Value
	'}'
	;

NodeTemplate returns NodeTemplate:
	{NodeTemplate }
	node_template_name=STRING ":"
	'{'
		'"type" :' type=STRING 
		(',\n"instances" : {' instances=Instances '}')?
		(',\n"description" :' description=STRING )?
		(',\n"relationships" :' '['relationships+=Relationship ( ","  relationships+=Relationship )* ']' )?
		(',\n"interfaces" :' '{' interfaces+=Interface ( "," interfaces+=Interface)* '}' )?
		',\n"properties" :' '{' 
		('\n"configuration" : {' 
			(configurations+=Configuration ( "," configurations+=Configuration)*)? '}' 
			(',\n"resources" :' '[' resources+=STRING ( ',' resources+=STRING)* ']' )? 
			(',\n"rules" :' '[' rules+=FirewallRule ( ',' rules+=FirewallRule)* ']' )? 
			(',\n"arguments" :' '[' arguments+=Argument ( ',' arguments+=Argument)* ']')? 
			(',' properties+=Property ( "," properties+=Property)* )?
		)?
	    '}'
		//(',\n"arguments" :' '{' arguments+=Argument ( "," arguments+=Argument)* '}' )?
		//(',\n"configuration" : {' configurations+=Configuration ( "," configurations+=Configuration)* '}' )? 
		(',\n"requirements" :' '{' requirements+=Requirement ( "," requirements+=Requirement)* '}' )?
		(',\n"capabilities" :' '{' capabilities+=Capability ( "," capabilities+=Capability)* '}' )?
	'}';
	
FirewallRule returns FirewallRule:
	//'FirewallRule'
	{FirewallRule}
	'{'
		'"remote_ip_prefix": ' remote_ip_prefix=STRING ','
		'"port": ' port=STRING
	'}';
	
Configuration returns Configuration:
	{Configuration}
	"\n" property_name=STRING ":"
	value=STRING
;

Instances returns Instances:
	{Instances}
	'"deploy" :' deploy=INT
;

Relationship returns Relationship:
	{Relationship}
	//relationship_name=STRING ":"
	'{'
		//'"relationship_name" :' relationship_name=STRING
		'"type" :' type=STRING
		(',\n"target" :' target=STRING )?
		(',\n"interfaces" :' '{' interfaces+=Interface ( "," interfaces+=Interface)* '}' )?
		(',\n"properties" :' '{' properties+=Property ( "," properties+=Property)* '}' )?
		(',\n"source_interfaces" :' '{' source_interfaces+=Interface ( "," source_interfaces+=Interface)* '}' )?
		(',\n"target_iterfaces" :' '{' target_interfaces+=Interface ( "," target_interfaces+=Interface)* '}' )?
	'}';

Group returns Group:
	{Group}
	group_name=STRING ":"
	'{'
		'"type" :' type=STRING 
		(',\n"description" :' description=STRING )?
		(',\n"targets" :' '{' targets+=EString ( "," targets+=STRING)* '}' )?
		(',\n"properties" :' properties=Property )?
		(',\n"interfaces" :' '{' interfaces+=Interface ( "," interfaces+=Interface)* '}' )?
	'}';

Policy returns Policy:
	{Policy}
	policy_name=STRING ":";

Interface returns Interface:
	{Interface}
	//interface_name=STRING ":"
	type=STRING ":"
	'{'
		//'"type" :' type=STRING 
		//(',\n"operations" :' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		(operations+=Operation ( "," operations+=Operation)* )?
		//(',\n"inputs" :' '{' inputs+=Property ( "," inputs+=Property)* '}' )?
	'}';

Property returns Property:
	{Property}
	"\n" property_name=STRING ":"
	value=STRING
	;

Requirement returns Requirement:
	requirement_name=STRING ":"
	'{'
		'"capabiity" :' capabiity=STRING
		(',\n"node" :' node=STRING )?
	'}';

Capability returns Capability:
	capability_name=STRING ":"
	'{'
		'"type" :' type=STRING 
		(',\n"description" :' description=STRING )?
		(',\n"properties" :' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

Operation returns Operation:
	{Operation}
		operation_name=STRING ":"
	'{'
		//'"primary" :' primary=STRING
		//(',\n"description" :' description=STRING )?
		('\n"inputs" :' '{' inputs+=Property ( "," inputs+=Property)* (',\n"resources" :' '[' dependentArtifacts+=STRING ( ', ' dependentArtifacts+=STRING )* ']' )? '}' )?
		
	'}'
	;	
	
Value returns Value:
	Value_Impl | Expression_Impl | SimpleValue | GetAttribute;
	
Argument returns Argument:
	//'Argument'
	//argument_name=EString
	//'{'
		//'argument_value' 
		argument_value=Value
	//'}'
	;
		
EIntegerObject returns ecore::EIntegerObject:
	'-'? INT;

Value_Impl returns Value:
	{Value}
	'Value'
	;

Expression_Impl returns Expression:
	{Expression}
	'Expression'
	;

SimpleValue returns SimpleValue:
	{SimpleValue}
	//'SimpleValue'
	//'{'
		//'value' 
		value=EString
	//'}'
	;

GetAttribute returns GetAttribute:
	{GetAttribute}
	'{'	
		'"get_attribute":' '[' node=STRING ',' attribute=STRING ']'
	'}'
	
	;
